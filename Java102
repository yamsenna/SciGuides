Goals:

Classes and Objects
fields
constructors
methods
static
public/private
Polymorphism
Interfaces
Generics
Inheritance
Functional Interfaces
Streams

Classes and Objects

Objects:  bundle of related data and functions that work together to perform specific tasks in a program
 example: if planning trajectory of a robot you need point object (stores x and y coords of the point)
needs : one method to translate a Point in the x direction, and one to translate it in the y direction

Classes: blueprint or template for creating objects (defines data and methods the object will have)

Point: 
public class Point {

Fields: stores data for the object
for instance: we want to store x and y coords in the object (they are both doubles) 

public class Point {
	public final double x;
	public final double y;
}

Constructor: special kind of function that creates an object

   constructor takes x and y values as inputs
public class Point {
	public final double x;
	public final double y;

	public Point(double x, double y) {
		this.x = x;
		this.y = y;
	}
}

public class Point {
	public final double x;
	public final double y;

	public Point(double x, double y) {
		this.x = x;
		this.y = y;
	}
}

Translation: 
method to translate a point in the x direction
method -> translateX

t : is how much to translate by

public Point translateX(double t) {
		return new Point(x + t, y);
	}
}

add for both x and y 

	public Point translateX(double t) {
		return new Point(x + t, y);
	}
	
	public Point translateY(double t) {
		return new Point(x, y + t);
	}
}

ToString : to make repetitive code less hard, making it more efficient and easier.

System.out.println("point: " + point);

@Override (further information later on)
	public String toString() {
		return "(" + x + ", " + y + ")";
	}
}

Distance: a method to find the distance between two points
   two Point objects and find the distance between them both

	public static double distance(Point p1, Point p2) {
		return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
	}
}

Polymorphism: concept "many shapes" or "many forms." refers to a single thing behaving differently based on how its used 
    it allows a single function or operation or class or structure to work with different types of data, making programs more flexible and easier to manage.

- several forms of polymorphism 

Generics: parametric polymorphism (simplest) 
    Generics allows you to write classes and methods that can work with any data type while maintaining type safety.
ArrayLists: (similar to an array) 
- stores its values in an Array that is longer than the length of the ArrayList until full

ArrayList<String> arr = new ArrayList<>();

( FULL DETAIL ON JAVA102.MD STEP BY STEP )

Generics in methods: printArray
prints out all the values in an array

static <T> String arrayToString(T[] arr) {
    String str = "[";
    for (int i = 0; i < arr.length - 1; i++) {
		str += arr[i] + ", ";
    }
    return str + arr[arr.length - 1] + "]";
}

Interfaces: form of subtype polymorphism

ScaleAll: static method in main that takes a double and Shape[] and returns a new Shape[], but with each of the shapes scaled by the double.

static Shape[] scaleAll(Shape[] shapes, double k) {
	Shape[] scaled = new Shape[shapes.length];
	for (int i = 0; i < shapes.length; i++) {
		scaled[i] = shapes[i].scale(k);
	}
	return scaled;
}

public interface Shape {
	public double area();

	/** 
	* @return The shape that results from scaling by k.
	*/
	public Shape scale(double k);
}

Inheritance: form of polymorphism in Java that allows a class to inherit properties and methods from another class
( Inheritance is a way of having classes that inherit the traits )

public class A {
	protected final double field1;
	protected final double field2;

	public A(double field1, double field2) {
		System.out.println("the constructor of A has been called");
		this.field1 = field1;
		this.field2 = field2;
	}

	public void method1() {
		System.out.println("method 1 of A has been called");
	}
	
	public void method2() {
		System.out.println("method 2 of A has been called");
	}
}

Object classes: defines the basic state and behavior that all objects must have

example
Library: building a system to keep track of item checkouts at a library
public class LibraryItem {
    public final String title;
    public final String itemId;
    
    protected boolean isCheckedOut = false;

    public LibraryItem(String title, String itemId) {
        this.title = title;
        this.itemId = itemId;
    }

	public boolean available() {
		return !isCheckedOut;
	}

    public void checkOut() {
        isCheckedOut = true;
    }

    public void returnItem() {
        isCheckedOut = false;
    }
}
public class Book extends LibraryItem {
    public final String author;
    public final int pageCount;

    public Book(String title, String itemId, String author, int pageCount) {
        super(title, itemId);
        this.author = author;
        this.pageCount = pageCount;
    }

	@Override
    public String toString() {
        return "Book: " + title + " by " + author + ", " + 
		        pageCount + " pages";
    }
}
public class DVD extends LibraryItem {
    public final double runtime;

    public DVD(String title, String itemId, double runtime) {
        super(title, itemId);
        this.runtime = runtime;
    }

    @Override
    public String toString() {
        return "DVD: " + title + ", Runtime: " + runtime + " minutes";
    }
}

word/phrase	meaning
field	- A variable belonging to an object or class.
method - A function belonging to an object or class.
